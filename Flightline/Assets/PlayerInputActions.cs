//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Plane"",
            ""id"": ""3ed56642-9f3a-42ee-8d89-afa7dd30a6e1"",
            ""actions"": [
                {
                    ""name"": ""throttleUp"",
                    ""type"": ""Button"",
                    ""id"": ""5f27f7e0-f9e1-4299-a8b6-9a302a174bdc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""throttleDown"",
                    ""type"": ""Button"",
                    ""id"": ""67d4e379-f3e9-47b3-9d77-aa37f807a066"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""pitchDown"",
                    ""type"": ""Button"",
                    ""id"": ""1c167c2d-d0d8-40d3-aabb-aeb25ff50b59"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""pitchUp"",
                    ""type"": ""Button"",
                    ""id"": ""e770e10a-42d2-4097-9311-1e32563c73e9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""rollLeft"",
                    ""type"": ""Button"",
                    ""id"": ""66fbfeba-5474-486e-b1a1-cdf65ca69125"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""rollRight"",
                    ""type"": ""Button"",
                    ""id"": ""2dab4104-af3e-4c09-9e9c-ceb4e4e6e995"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""flapsUp"",
                    ""type"": ""Button"",
                    ""id"": ""21567d1a-dc40-4e6a-87da-338dafe34a19"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""flapsDown"",
                    ""type"": ""Button"",
                    ""id"": ""8ed366b3-7669-4643-b6df-57c3b665b9b2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""spoilers"",
                    ""type"": ""Button"",
                    ""id"": ""f8c656b3-47ee-4654-9914-f56d58a41b1e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e33e8cce-b5b4-45dc-99e5-e07ff4532383"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""throttleUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""34348ba5-22d6-4405-b80e-7851dbbe3f68"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""throttleDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3a46a6e7-f509-475a-93b4-abd20eb8fef0"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""pitchDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""258cfb83-ecf4-46f3-97b0-8a016e352eb2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""pitchUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7bc4381f-49e9-4a6a-abf4-9c67bbed609f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""rollLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9783b9d3-d82a-4b65-99b7-42767f8d7ba3"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""rollRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b545482d-1814-43ab-a47b-3004420872b6"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""flapsUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""061714ba-0a22-4f6a-9c2f-66df53363b06"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""flapsDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97f84902-5cbc-4b5c-98b3-8d482d452744"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""spoilers"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Default"",
            ""bindingGroup"": ""Default"",
            ""devices"": []
        }
    ]
}");
        // Plane
        m_Plane = asset.FindActionMap("Plane", throwIfNotFound: true);
        m_Plane_throttleUp = m_Plane.FindAction("throttleUp", throwIfNotFound: true);
        m_Plane_throttleDown = m_Plane.FindAction("throttleDown", throwIfNotFound: true);
        m_Plane_pitchDown = m_Plane.FindAction("pitchDown", throwIfNotFound: true);
        m_Plane_pitchUp = m_Plane.FindAction("pitchUp", throwIfNotFound: true);
        m_Plane_rollLeft = m_Plane.FindAction("rollLeft", throwIfNotFound: true);
        m_Plane_rollRight = m_Plane.FindAction("rollRight", throwIfNotFound: true);
        m_Plane_flapsUp = m_Plane.FindAction("flapsUp", throwIfNotFound: true);
        m_Plane_flapsDown = m_Plane.FindAction("flapsDown", throwIfNotFound: true);
        m_Plane_spoilers = m_Plane.FindAction("spoilers", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Plane
    private readonly InputActionMap m_Plane;
    private List<IPlaneActions> m_PlaneActionsCallbackInterfaces = new List<IPlaneActions>();
    private readonly InputAction m_Plane_throttleUp;
    private readonly InputAction m_Plane_throttleDown;
    private readonly InputAction m_Plane_pitchDown;
    private readonly InputAction m_Plane_pitchUp;
    private readonly InputAction m_Plane_rollLeft;
    private readonly InputAction m_Plane_rollRight;
    private readonly InputAction m_Plane_flapsUp;
    private readonly InputAction m_Plane_flapsDown;
    private readonly InputAction m_Plane_spoilers;
    public struct PlaneActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlaneActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @throttleUp => m_Wrapper.m_Plane_throttleUp;
        public InputAction @throttleDown => m_Wrapper.m_Plane_throttleDown;
        public InputAction @pitchDown => m_Wrapper.m_Plane_pitchDown;
        public InputAction @pitchUp => m_Wrapper.m_Plane_pitchUp;
        public InputAction @rollLeft => m_Wrapper.m_Plane_rollLeft;
        public InputAction @rollRight => m_Wrapper.m_Plane_rollRight;
        public InputAction @flapsUp => m_Wrapper.m_Plane_flapsUp;
        public InputAction @flapsDown => m_Wrapper.m_Plane_flapsDown;
        public InputAction @spoilers => m_Wrapper.m_Plane_spoilers;
        public InputActionMap Get() { return m_Wrapper.m_Plane; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlaneActions set) { return set.Get(); }
        public void AddCallbacks(IPlaneActions instance)
        {
            if (instance == null || m_Wrapper.m_PlaneActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlaneActionsCallbackInterfaces.Add(instance);
            @throttleUp.started += instance.OnThrottleUp;
            @throttleUp.performed += instance.OnThrottleUp;
            @throttleUp.canceled += instance.OnThrottleUp;
            @throttleDown.started += instance.OnThrottleDown;
            @throttleDown.performed += instance.OnThrottleDown;
            @throttleDown.canceled += instance.OnThrottleDown;
            @pitchDown.started += instance.OnPitchDown;
            @pitchDown.performed += instance.OnPitchDown;
            @pitchDown.canceled += instance.OnPitchDown;
            @pitchUp.started += instance.OnPitchUp;
            @pitchUp.performed += instance.OnPitchUp;
            @pitchUp.canceled += instance.OnPitchUp;
            @rollLeft.started += instance.OnRollLeft;
            @rollLeft.performed += instance.OnRollLeft;
            @rollLeft.canceled += instance.OnRollLeft;
            @rollRight.started += instance.OnRollRight;
            @rollRight.performed += instance.OnRollRight;
            @rollRight.canceled += instance.OnRollRight;
            @flapsUp.started += instance.OnFlapsUp;
            @flapsUp.performed += instance.OnFlapsUp;
            @flapsUp.canceled += instance.OnFlapsUp;
            @flapsDown.started += instance.OnFlapsDown;
            @flapsDown.performed += instance.OnFlapsDown;
            @flapsDown.canceled += instance.OnFlapsDown;
            @spoilers.started += instance.OnSpoilers;
            @spoilers.performed += instance.OnSpoilers;
            @spoilers.canceled += instance.OnSpoilers;
        }

        private void UnregisterCallbacks(IPlaneActions instance)
        {
            @throttleUp.started -= instance.OnThrottleUp;
            @throttleUp.performed -= instance.OnThrottleUp;
            @throttleUp.canceled -= instance.OnThrottleUp;
            @throttleDown.started -= instance.OnThrottleDown;
            @throttleDown.performed -= instance.OnThrottleDown;
            @throttleDown.canceled -= instance.OnThrottleDown;
            @pitchDown.started -= instance.OnPitchDown;
            @pitchDown.performed -= instance.OnPitchDown;
            @pitchDown.canceled -= instance.OnPitchDown;
            @pitchUp.started -= instance.OnPitchUp;
            @pitchUp.performed -= instance.OnPitchUp;
            @pitchUp.canceled -= instance.OnPitchUp;
            @rollLeft.started -= instance.OnRollLeft;
            @rollLeft.performed -= instance.OnRollLeft;
            @rollLeft.canceled -= instance.OnRollLeft;
            @rollRight.started -= instance.OnRollRight;
            @rollRight.performed -= instance.OnRollRight;
            @rollRight.canceled -= instance.OnRollRight;
            @flapsUp.started -= instance.OnFlapsUp;
            @flapsUp.performed -= instance.OnFlapsUp;
            @flapsUp.canceled -= instance.OnFlapsUp;
            @flapsDown.started -= instance.OnFlapsDown;
            @flapsDown.performed -= instance.OnFlapsDown;
            @flapsDown.canceled -= instance.OnFlapsDown;
            @spoilers.started -= instance.OnSpoilers;
            @spoilers.performed -= instance.OnSpoilers;
            @spoilers.canceled -= instance.OnSpoilers;
        }

        public void RemoveCallbacks(IPlaneActions instance)
        {
            if (m_Wrapper.m_PlaneActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlaneActions instance)
        {
            foreach (var item in m_Wrapper.m_PlaneActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlaneActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlaneActions @Plane => new PlaneActions(this);
    private int m_DefaultSchemeIndex = -1;
    public InputControlScheme DefaultScheme
    {
        get
        {
            if (m_DefaultSchemeIndex == -1) m_DefaultSchemeIndex = asset.FindControlSchemeIndex("Default");
            return asset.controlSchemes[m_DefaultSchemeIndex];
        }
    }
    public interface IPlaneActions
    {
        void OnThrottleUp(InputAction.CallbackContext context);
        void OnThrottleDown(InputAction.CallbackContext context);
        void OnPitchDown(InputAction.CallbackContext context);
        void OnPitchUp(InputAction.CallbackContext context);
        void OnRollLeft(InputAction.CallbackContext context);
        void OnRollRight(InputAction.CallbackContext context);
        void OnFlapsUp(InputAction.CallbackContext context);
        void OnFlapsDown(InputAction.CallbackContext context);
        void OnSpoilers(InputAction.CallbackContext context);
    }
}
